@page "/queue-tokens"
@page "/queue-tokens/{QueueId:int}"
@inject QueueService.QueueServiceClient QS
@inject ILocalStorageService LS

<div class="component-scope">
    @foreach (var t in tokens)
    {
        <div class="animal-token">
            <svg width="100%" height="100%" viewBox="0 0 40 40" fill="none"
                 xmlns="http://www.w3.org/2000/svg" class="clover ">
                <path d="M.887 14.467C-2.845 5.875 5.875-2.845 14.467.887l1.42.617a10.323 10.323 0 0 0 8.225 0l1.42-.617c8.593-3.732 17.313 4.988 13.581 13.58l-.617 1.42a10.323 10.323 0 0 0 0 8.225l.617 1.42c3.732 8.593-4.989 17.313-13.58 13.581l-1.42-.617a10.323 10.323 0 0 0-8.225 0l-1.42.617C5.874 42.845-2.846 34.125.886 25.533l.617-1.42a10.323 10.323 0 0 0 0-8.225l-.617-1.42Z"
                      fill="var(--color@( t.Color ))">
                </path>
            </svg>
            <img src="/images/animals/animal@(t.Animal).png" />
        </div>
    }
</div>



@code {
    [Parameter] public int QueueId { get; set; }

    private IList<QueueToken> tokens;
    protected async override Task OnInitializedAsync()
    {
        var headers = new Metadata();
        headers.Add("Authorization", $"Bearer {await LS.GetItemAsync<string>("AccessToken")}");
        tokens = (await QS.GetQueueTokensAsync(new GetQueueTokensRequest { QueueId = QueueId }, headers)).Tokens;
    }
}
